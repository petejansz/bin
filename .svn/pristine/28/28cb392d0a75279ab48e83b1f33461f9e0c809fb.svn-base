/*
  NodeJS command-line interface to pd-crm-processess processes/account-activation-mail REST API.
  /california/api/v1/processes/account-activation-mail
  Author: Pete Jansz
*/

var http = require( "http" );
var program = require( process.env.USERPROFILE + '/AppData/Roaming/npm/node_modules/commander' );
var lib1 = require( process.env.USERPROFILE + "/Documents/bin/lib1.js" );

program
    .version( '0.0.1' )
    .description( 'CLI interface to pd-crm-processess processes/account-activation-mail REST API' )
    .usage( 'processes-activate-account [options] <file ...>' )
    .option( '-i, --playerId <playerId>', 'PlayerID', parseInt )
    .option( '-h, --hostname <hostname>', 'Hostname' )
    .parse( process.argv );

var exitValue = 0;

if ( !program.playerId || !program.hostname )
{
    program.help();
    process.exit( 1 );
}

var siteID = 35;
var systemId = 8;
var channelId = 2;

var jsonBody =
    {
        "callerChannelId": channelId,
        "callingClientId": "127.0.0.1",
        "callerSystemId": systemId,
        "transactionIdBase": lib1.generateUUID(),
        "transactionTime": new Date().valueOf(),
        "siteID": siteID,
        "playerId": program.playerId
    };

var options = {
    "method": "POST",
    "hostname": program.hostname,
    "port": 8180,
    "path": "/california/api/v1/processes/account-activation-mail",
    "headers": {
        "x-player-id": program.playerId,
        "x-site-id": siteID,
        "x-channel-id": channelId,
        "x-ex-system-id": systemId,
        "x-client-id": "127.0.0.1",
        "x-unique-id": "V6Cypgr-Um0AAAdzZasdcvbdsd",
        "content-type": "application/json;charset=UTF-8",
        "accept-language": "en-US,en;q=0.8,mt;q=0.6",
        "accept-encoding": "gzip, deflate, br",
        "accept": "application/json, text/javascript, */*; q=0.01",
        "cache-control": "no-cache",
    }
};

var req = http.request( options, function ( res )
{
    var chunks = [];

    res.on( "data", function ( chunk )
    {
        chunks.push( chunk );
    } );

    res.on( "end", function ()
    {
        var body = Buffer.concat( chunks );
        console.log( body.toString() );
    } );
} );

req.write( JSON.stringify( jsonBody ) );
req.end();